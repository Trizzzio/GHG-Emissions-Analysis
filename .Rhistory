),
mainPanel(
plotOutput("ghg_plot")
)
)
)
server <- function(input, output) {
output$ghg_plot <- renderPlot({
# Filter data based on user selection
filtered_data <- shinydata %>%
filter(region %in% input$selected_regions)
# Create plot
ggplot(filtered_data, aes(x = year, y = !!sym(input$time_series_type), color = Region)) +
geom_line(size = 1) +
labs(
title = "GHG Emissions Over Time",
x = "Year",
y = ifelse(input$time_series_type == "ghg_emissions", "GHG Emissions", "Cumulative GHG Emissions"),
color = "Region"
) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$ghg_plot <- renderPlot({
# Filter data based on user selection
filtered_data <- shinydata %>%
filter(region %in% input$selected_regions)
# Create plot
ggplot(filtered_data, aes(x = year, y = !!sym(input$time_series_type), color = region)) +
geom_line(size = 1) +
labs(
title = "GHG Emissions Over Time",
x = "Year",
y = ifelse(input$time_series_type == "ghg_emissions", "GHG Emissions", "Cumulative GHG Emissions"),
color = "Region"
) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("GHG Emissions Visualization"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"selected_regions",
"Select Regions:",
choices = unique(shinydata$region),
selected = unique(shinydata$region)
),
radioButtons(
"time_series_type",
"Select Time Series Type:",
choices = c("Simple" = "ghg_emissions", "Cumulative" = "ghg_cumulative"),
selected = "ghg_emissions"
)
),
mainPanel(
plotOutput("ghg_plot")
)
)
)
server <- function(input, output) {
output$ghg_plot <- renderPlot({
# Filter data based on user selection
filtered_data <- shinydata %>%
filter(region %in% input$selected_regions)
# Create plot
ggplot(filtered_data, aes(x = year, y = !!sym(input$time_series_type), color = region)) +
geom_line(size = 1) +
labs(
title = "GHG Emissions Over Time",
x = "Year",
y = ifelse(input$time_series_type == "ghg_emissions", "GHG Emissions", "Cumulative GHG Emissions"),
color = "Region"
) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
rm(Shinydata)
rm(ghg_original)
shinyApp(ui = ui, server = server)
install.packages("rmarkdown")
install.packages("tinytex")
tinytex::install_tinytex()
plot(p1)
library(tidyverse)
library(readxl)
library(DBI)
library(RSQLite)
###Evolution of GHG growth in the euro area, European Union (EU27) and worldwide;
library(scales)
library(shiny)
EU<-c("Austria","Belgium","Croatia","Cyprus","Estonia", "Finland","France","Germany","Greence","Ireland","Italy","Latvia","Lithuania",
"Luxembourg","Malta","Netherlands","Portugal","Slovakia","Slovenia","Spain","EU27", "GLOBAL TOTAL")
EU_string <- paste0("'", paste(EU, collapse = "', '"), "'")
years <- 1970:2023
year_sums <- paste0("SUM(`", years, "`) AS `", years, "`", collapse = ", ")
year_columns <- paste0("`", years, "`", collapse = ", ")
# Build the query dynamically
query <- paste0("
SELECT
'EU' AS Country,
'' AS `EDGAR Country Code`,
", year_sums, "
FROM GHG_totals_by_country
WHERE Country IN ('Austria', 'Belgium', 'Croatia', 'Cyprus', 'Estonia', 'Finland',
'France', 'Germany', 'Greece', 'Ireland', 'Italy', 'Latvia',
'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Portugal',
'Slovakia', 'Slovenia', 'Spain', 'Bulgaria', 'Czech Republic',
'Denmark', 'Hungary', 'Poland', 'Romania', 'Sweden')
UNION ALL
SELECT
Country,
`EDGAR Country Code`,
", year_columns, "
FROM GHG_totals_by_country
WHERE Country IN ('EU27', 'GLOBAL TOTAL');
")
data <- dbGetQuery(db, query)
file <- "EDGAR_2024_GHG_booklet_2024.xlsx"
#SQL connection
db<- dbConnect(SQLite(), dbname="ghg_emissions.sqlite")
sheet_names <- excel_sheets(file)
sheet_names <- sheet_names[-(1:2)]
##Loop through sheets and add them to sql database
for (sheet in sheet_names){
data <- read_excel(file, sheet=sheet)
dbWriteTable(db, name = sheet, value =data, row.names = FALSE, overwrite=TRUE)
}
dbListConnections(ghg_emissions.sqlite)
file <- "EDGAR_2024_GHG_booklet_2024.xlsx"
#SQL connection
db<- dbConnect(SQLite(), dbname="ghg_emissions.sqlite")
sheet_names <- excel_sheets(file)
sheet_names <- sheet_names[-(1:2)]
##Loop through sheets and add them to sql database
for (sheet in sheet_names){
data <- read_excel(file, sheet=sheet)
dbWriteTable(db, name = sheet, value =data, row.names = FALSE, overwrite=TRUE)
}
dbListConnections(ghg_emissions.sqlite)
dbListConnections(ghg_emissions.sqlite)
dbDisconnect()
dbDisconnect(db)
file <- "EDGAR_2024_GHG_booklet_2024.xlsx"
#SQL connection
db<- dbConnect(SQLite(), dbname="ghg_emissions.sqlite")
sheet_names <- excel_sheets(file)
sheet_names <- sheet_names[-(1:2)]
##Loop through sheets and add them to sql database
for (sheet in sheet_names){
data <- read_excel(file, sheet=sheet)
dbWriteTable(db, name = sheet, value =data, row.names = FALSE, overwrite=TRUE)
}
dbListConnections(ghg_emissions.sqlite)
View(db)
dbListTables(db)
dbListConnections(ghg_emissions.sqlite)
EU<-c("Austria","Belgium","Croatia","Cyprus","Estonia", "Finland","France","Germany","Greence","Ireland","Italy","Latvia","Lithuania",
"Luxembourg","Malta","Netherlands","Portugal","Slovakia","Slovenia","Spain","EU27", "GLOBAL TOTAL")
EU_string <- paste0("'", paste(EU, collapse = "', '"), "'")
years <- 1970:2023
year_sums <- paste0("SUM(`", years, "`) AS `", years, "`", collapse = ", ")
year_columns <- paste0("`", years, "`", collapse = ", ")
# Build the query dynamically
query <- paste0("
SELECT
'EU' AS Country,
'' AS `EDGAR Country Code`,
", year_sums, "
FROM GHG_totals_by_country
WHERE Country IN ('Austria', 'Belgium', 'Croatia', 'Cyprus', 'Estonia', 'Finland',
'France', 'Germany', 'Greece', 'Ireland', 'Italy', 'Latvia',
'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Portugal',
'Slovakia', 'Slovenia', 'Spain', 'Bulgaria', 'Czech Republic',
'Denmark', 'Hungary', 'Poland', 'Romania', 'Sweden')
UNION ALL
SELECT
Country,
`EDGAR Country Code`,
", year_columns, "
FROM GHG_totals_by_country
WHERE Country IN ('EU27', 'GLOBAL TOTAL');
")
data <- dbGetQuery(db, query)
cumdata<-data%>%
mutate("EDGAR Country Code"=NULL)%>%
pivot_longer(-Country, names_to = "year", values_to = "GHG_emissions")%>%
pivot_wider(names_from = Country,values_from = GHG_emissions)%>%
rename(Global="GLOBAL TOTAL")%>%
mutate(year = as.numeric(year))%>%
mutate(cumsumEU=cumsum(EU),cumsumEU27=cumsum(EU27),cumsumTG=cumsum(Global))%>%
pivot_longer(-year,names_to = "Region", values_to = "GHG_emissions")
#Separet dfs
ghg <- cumdata %>% filter(!str_detect(Region, "cumsum"))
ghg_cumulative<- cumdata %>% filter(str_detect(Region, "cumsum"))
##Creating graph
p1 <- ggplot() +
# Plot the Global emissions
geom_line(data = filter(ghg, Region == "Global"),
aes(x = year, y = GHG_emissions, color = Region),
size = 1) +
# Plot EU and EU27 emissions (scaled by 5 for visualization)
geom_line(data = filter(ghg, Region != "Global"),
aes(x = year, y = GHG_emissions * 5, color = Region),
size = 1) +
# Primary y-axis (Global emissions)
scale_y_continuous(
name = "Global GHG Emissions",
sec.axis = sec_axis(~ . / 5, name = "EU and EU27 GHG Emissions") # Secondary y-axis (scaled down)
) +
labs(
title = "GHG Emissions Over Time with Dual Y-Axes",
x = "Year",
color = "Macro Region"
) +
theme_minimal()
p2 <- ggplot() +
# Plot the Global emissions
geom_line(data = filter(ghg_cumulative, Region == "cumsumTG"),
aes(x = year, y = GHG_emissions, color = Region),
size = 1) +
# Plot EU and EU27 emissions (scaled by 5 for visualization)
geom_line(data = filter(ghg_cumulative, Region != "cumsumTG"),
aes(x = year, y = GHG_emissions * 5, color = Region),
size = 1) +
# Primary y-axis (Global emissions)
scale_y_continuous(
name = "Global GHG Emissions",
labels = label_number(),
sec.axis = sec_axis(~ . / 5, name = "EU and EU27 GHG Emissions",labels = label_number()) # Secondary y-axis (scaled down)
) +
labs(
title = "GHG Emissions Over Time with Dual Y-Axes",
x = "Year",
color = "Macro Region"
) +
theme_minimal()
plot(p1)
plot(p2)
##Shiny App
#Prepare data
ghg_cum<-ghg_cumulative["GHG_emissions"]%>%rename(ghg_cumulative=GHG_emissions)
shinydata<-cbind(ghg,ghg_cum)%>%
rename(ghg_emissions=GHG_emissions)
ui <- fluidPage(
titlePanel("GHG Emissions Visualization"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"selected_regions",
"Select Regions:",
choices = unique(shinydata$region),
selected = unique(shinydata$region)
),
radioButtons(
"time_series_type",
"Select Time Series Type:",
choices = c("Simple" = "ghg_emissions", "Cumulative" = "ghg_cumulative"),
selected = "ghg_emissions"
)
),
mainPanel(
plotOutput("ghg_plot")
)
)
)
server <- function(input, output) {
output$ghg_plot <- renderPlot({
# Filter data based on user selection
filtered_data <- shinydata %>%
filter(region %in% input$selected_regions)
# Create plot
ggplot(filtered_data, aes(x = year, y = !!sym(input$time_series_type), color = region)) +
geom_line(size = 1) +
labs(
title = "GHG Emissions Over Time",
x = "Year",
y = ifelse(input$time_series_type == "ghg_emissions", "GHG Emissions", "Cumulative GHG Emissions"),
color = "Region"
) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
View(shinydata)
ghg_cum<-ghg_cumulative["GHG_emissions"]%>%rename(ghg_cumulative=GHG_emissions)
shinydata<-cbind(ghg,ghg_cum)%>%
rename(ghg_emissions=GHG_emissions,region=Region)
ui <- fluidPage(
titlePanel("GHG Emissions Visualization"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"selected_regions",
"Select Regions:",
choices = unique(shinydata$region),
selected = unique(shinydata$region)
),
radioButtons(
"time_series_type",
"Select Time Series Type:",
choices = c("Simple" = "ghg_emissions", "Cumulative" = "ghg_cumulative"),
selected = "ghg_emissions"
)
),
mainPanel(
plotOutput("ghg_plot")
)
)
)
server <- function(input, output) {
output$ghg_plot <- renderPlot({
# Filter data based on user selection
filtered_data <- shinydata %>%
filter(region %in% input$selected_regions)
# Create plot
ggplot(filtered_data, aes(x = year, y = !!sym(input$time_series_type), color = region)) +
geom_line(size = 1) +
labs(
title = "GHG Emissions Over Time",
x = "Year",
y = ifelse(input$time_series_type == "ghg_emissions", "GHG Emissions", "Cumulative GHG Emissions"),
color = "Region"
) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("GHG Emissions Visualization"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"selected_regions",
"Select Regions:",
choices = unique(shinydata$region),
selected = unique(shinydata$region)
),
radioButtons(
"time_series_type",
"Select Time Series Type:",
choices = c("Simple" = "ghg_emissions", "Cumulative" = "ghg_cumulative"),
selected = "ghg_emissions"
)
),
mainPanel(
plotOutput("ghg_plot")
)
)
)
server <- function(input, output) {
output$ghg_plot <- renderPlot({
# Filter data based on user selection
filtered_data <- shinydata %>%
filter(region %in% input$selected_regions)
# Create plot
ggplot(filtered_data, aes(x = year, y = !!sym(input$time_series_type), color = region)) +
geom_line(size = 1) +
labs(
title = "GHG Emissions Over Time",
x = "Year",
y = ifelse(input$time_series_type == "ghg_emissions", "GHG Emissions", "Cumulative GHG Emissions"),
color = "Region"
) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
db<- dbConnect(SQLite(), dbname="ghg_emissions.sqlite")
dbDisconnect()
dbDisconnect(db)
###Evolution of GHG growth in the euro area, European Union (EU27) and worldwide;
library(scales)
library(shiny)
db<- dbConnect(SQLite(), dbname="ghg_emissions.sqlite")
EU<-c("Austria","Belgium","Croatia","Cyprus","Estonia", "Finland","France","Germany","Greence","Ireland","Italy","Latvia","Lithuania",
"Luxembourg","Malta","Netherlands","Portugal","Slovakia","Slovenia","Spain","EU27", "GLOBAL TOTAL")
EU_string <- paste0("'", paste(EU, collapse = "', '"), "'")
years <- 1970:2023
year_sums <- paste0("SUM(`", years, "`) AS `", years, "`", collapse = ", ")
year_columns <- paste0("`", years, "`", collapse = ", ")
# Build the query dynamically
query <- paste0("
SELECT
'EU' AS Country,
'' AS `EDGAR Country Code`,
", year_sums, "
FROM GHG_totals_by_country
WHERE Country IN ('Austria', 'Belgium', 'Croatia', 'Cyprus', 'Estonia', 'Finland',
'France', 'Germany', 'Greece', 'Ireland', 'Italy', 'Latvia',
'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Portugal',
'Slovakia', 'Slovenia', 'Spain', 'Bulgaria', 'Czech Republic',
'Denmark', 'Hungary', 'Poland', 'Romania', 'Sweden')
UNION ALL
SELECT
Country,
`EDGAR Country Code`,
", year_columns, "
FROM GHG_totals_by_country
WHERE Country IN ('EU27', 'GLOBAL TOTAL');
")
data <- dbGetQuery(db, query)
cumdata<-data%>%
mutate("EDGAR Country Code"=NULL)%>%
pivot_longer(-Country, names_to = "year", values_to = "GHG_emissions")%>%
pivot_wider(names_from = Country,values_from = GHG_emissions)%>%
rename(Global="GLOBAL TOTAL")%>%
mutate(year = as.numeric(year))%>%
mutate(cumsumEU=cumsum(EU),cumsumEU27=cumsum(EU27),cumsumTG=cumsum(Global))%>%
pivot_longer(-year,names_to = "Region", values_to = "GHG_emissions")
#Separet dfs
ghg <- cumdata %>% filter(!str_detect(Region, "cumsum"))
ghg_cumulative<- cumdata %>% filter(str_detect(Region, "cumsum"))
##Creating graph
p1 <- ggplot() +
# Plot the Global emissions
geom_line(data = filter(ghg, Region == "Global"),
aes(x = year, y = GHG_emissions, color = Region),
size = 1) +
# Plot EU and EU27 emissions (scaled by 5 for visualization)
geom_line(data = filter(ghg, Region != "Global"),
aes(x = year, y = GHG_emissions * 5, color = Region),
size = 1) +
# Primary y-axis (Global emissions)
scale_y_continuous(
name = "Global GHG Emissions",
sec.axis = sec_axis(~ . / 5, name = "EU and EU27 GHG Emissions") # Secondary y-axis (scaled down)
) +
labs(
title = "GHG Emissions Over Time with Dual Y-Axes",
x = "Year",
color = "Macro Region"
) +
theme_minimal()
p2 <- ggplot() +
# Plot the Global emissions
geom_line(data = filter(ghg_cumulative, Region == "cumsumTG"),
aes(x = year, y = GHG_emissions, color = Region),
size = 1) +
# Plot EU and EU27 emissions (scaled by 5 for visualization)
geom_line(data = filter(ghg_cumulative, Region != "cumsumTG"),
aes(x = year, y = GHG_emissions * 5, color = Region),
size = 1) +
# Primary y-axis (Global emissions)
scale_y_continuous(
name = "Global GHG Emissions",
labels = label_number(),
sec.axis = sec_axis(~ . / 5, name = "EU and EU27 GHG Emissions",labels = label_number()) # Secondary y-axis (scaled down)
) +
labs(
title = "GHG Emissions Over Time with Dual Y-Axes",
x = "Year",
color = "Macro Region"
) +
theme_minimal()
plot(p1)
plot(p2)
##Shiny App
#Prepare data
ghg_cum<-ghg_cumulative["GHG_emissions"]%>%rename(ghg_cumulative=GHG_emissions)
shinydata<-cbind(ghg,ghg_cum)%>%
rename(ghg_emissions=GHG_emissions,region=Region)
ui <- fluidPage(
titlePanel("GHG Emissions Visualization"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"selected_regions",
"Select Regions:",
choices = unique(shinydata$region),
selected = unique(shinydata$region)
),
radioButtons(
"time_series_type",
"Select Time Series Type:",
choices = c("Simple" = "ghg_emissions", "Cumulative" = "ghg_cumulative"),
selected = "ghg_emissions"
)
),
mainPanel(
plotOutput("ghg_plot")
)
)
)
server <- function(input, output) {
output$ghg_plot <- renderPlot({
# Filter data based on user selection
filtered_data <- shinydata %>%
filter(region %in% input$selected_regions)
# Create plot
ggplot(filtered_data, aes(x = year, y = !!sym(input$time_series_type), color = region)) +
geom_line(size = 1) +
labs(
title = "GHG Emissions Over Time",
x = "Year",
y = ifelse(input$time_series_type == "ghg_emissions", "GHG Emissions", "Cumulative GHG Emissions"),
color = "Region"
) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
on.exit(dbDisconnect(db), add = TRUE)
dg
dbListTables(db)
on.exit(dbDisconnect(db), add = TRUE)
dbListTables(db)
